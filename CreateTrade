#!/usr/bin/env python
# pylint: disable=unused-argument, import-error
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
import constants as cs

from telegram import ForceReply, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from pybit.unified_trading import HTTP

session = HTTP(
    testnet=True,
    api_key=cs.api_key,
    api_secret=cs.api_secret,
)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=ForceReply(selective=True),
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("Help!")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    data = {}
    cnt = 0
    msg = update.message.text
    msgLst = msg.splitlines()
    for tmp in msgLst:
        if (tmp.startswith("Trader")):
            data["Trader"] = tmp.split()[1]
        elif (tmp.startswith("Ticker")):
            data["Ticker"] = tmp.split()[1]
            data["Direction"] = tmp.split()[3]
        elif (tmp.startswith("Entry price")):
            data["Action"] = "Open"
            data["EntryPrice"] = tmp.split()[2]
            if data["EntryPrice"][-1] == "$":
                data["EntryPrice"] = data["EntryPrice"][:-1]
        elif (tmp.startswith("Entry / Closing")):
            data["Action"] = "Close"
            data["ExitPrice"] = tmp.split()[-1]
            if data["ExitPrice"][-1] == "$":
                data["ExitPrice"] = data["ExitPrice"][:-1]
        elif (tmp.startswith("Leverage")):
            data["Leverage"] = tmp.split()[1]

    if data["Action"] == "Open" and data["Direction"] == "LONG":
        cnt += 1
        # open trade
        res = session.place_order(
                category="spot",
                symbol=data["Ticker"],
                side="Buy",
                orderType="Market",
                qty=cs.amount,
                #price=data["EntryPrice"],
                timeInForce="GTC",
                orderLinkId="jtrspotbotbuy",
                isLeverage=0,
                #orderFilter="Order",
                )
        #print(res)
        buyqty = (float) ((float)(cs.amount) / (float)(data["EntryPrice"]))
        buyqty = round(buyqty, 4)
        print("buy quantity: ", buyqty)
        tps = {}
        tps[cs.tp1] = cs.tp1qty
        tps[cs.tp2] = cs.tp2qty
        tps[cs.tp3] = cs.tp3qty
        for tp in tps.keys():
            print("target point", tp)
            tpqty = float ((buyqty * tps[tp]) / 100)
            tpqty = round(tpqty, 4)
            print("target point percentge", tps[tp])
            print("target point quantity", tpqty)
            tpprice = float ((float)(data["EntryPrice"]) * ((float)(100 + (float)(tp)) / 100))
            tpprice = round(tpprice, 4)
            print("target point price", tpprice)
            orderlink = "jtrspotbotsell" + str(tp)
            tpres = session.place_order(
                    category="spot",
                    symbol=data["Ticker"],
                    side="Sell",
                    orderType="Limit",
                    qty=tpqty,
                    price=tpprice,
                    #timeInForce="PostOnly",
                    orderLinkId=orderlink,
                    isLeverage=0,
                    orderFilter="Order",
                    )
            print(tpres)
    elif data["Action"] == "Open":
        # TODO: close trade
        print()
    for key in data.keys():
        await update.message.reply_text(str(cnt) + ": key:" + key + " , value: " + data[key])
    #await update.message.reply_text(update.message.text)



def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token("6387092773:AAGsur0zw1u7FH88vpU1-axAsF0S1MDXSA0").build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # on non command i.e message - echo the message on Telegram
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
